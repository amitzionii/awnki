#!/usr/bin/awk -f


#####################
# Utility Functions #
#####################

function print_green(text)
{
    printf("\033[32m%s\033[0m", text)
}

function print_red(text)
{
    printf("\033[31m%s\033[0m", text)
}

function print_blue(text)
{
    printf("\033[34m%s\033[0m", text)
}

function print_yellow(text)
{
    printf("\033[33m%s\033[0m", text)
}
function print_purple(text)
{
    printf("\033[35m%s\033[0m", text)
}

# Return the date and time of now in the format
# of seconds since UNIX epoch
function get_now()
{
    "date \"+%s\" " | getline now
    return now
}

#####################
# Program Functions #
#####################
function play_card()
{
    printf("--------------------------------------------------------------------------------\n")
    print question
    getline user_answer < "-"

    if(user_answer == correct_answer)
    {
        print_green("correct\n")

        if(consecutive_successes  == 0)
            next_review = NOW + INTERVAL
        else if(consecutive_successes == 1)
            next_review = NOW + (6 * INTERVAL)
        else
            next_review = NOW + int(INTERVAL * easiness_factor)

        consecutive_successes += 1
        easiness_factor += 0.1
    }
    else
    {
        print_red("incorrect:")
        print_yellow(correct_answer)
        printf("\n")
        

        consecutive_successes = 0
        next_review = get_now()
        easiness_factor += -0.54

    }

    if(easiness_factor < 1.3)
        easiness_factor = 1.3

    print next_review, consecutive_successes, easiness_factor, correct_answer, question >> TEMP_FILE_PATH
}



#################
# Program Start #
#################

BEGIN{
    if(ARGC == 2)
    {
        FS = " *\\| *"
        OFS = " | "

        INTERVAL = 3600
        NOW = get_now()
        DECK_FILE_PATH = ARGV[1]
        TEMP_FILE_PATH = sprintf("%s.temp", DECK_FILE_PATH)
    }
    else
    {
        printf("usage: awnki [deck_file]\n")
        exit
    }

}


# New Cards
NF == 2{
    next_review           = 0
    consecutive_successes = 0
    easiness_factor       = 1.3
    correct_answer        = $1
    question              = $2

    play_card()
}


# Existing Cards
NF == 5{

    next_review           = $1
    consecutive_successes = $2
    easiness_factor       = $3
    correct_answer        = $4
    question              = $5

    if(NOW > next_review)
        play_card()
    else
        print next_review, consecutive_successes, easiness_factor, correct_answer, question >> TEMP_FILE_PATH

}

END{
    if(ARGC == 2)
    {
        system(sprintf("sort -r %s > %s ", TEMP_FILE_PATH, DECK_FILE_PATH))
        system(sprintf("rm -f %s", TEMP_FILE_PATH))
    }

} 
